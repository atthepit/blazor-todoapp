@page "/"

@using MediatR;

@using TodoApp.Client.Components;
@using TodoApp.Client.Features;
@using TodoApp.Shared;

@inject IMediator Mediator

@if (Todos == null)
{
    <p>Loading...</p>
}
else
{
    <TodoList Todos="@Todos" OnTodoSelected="HandleTodoSelected" OnTodoRemove="HandleTodoRemove" />
    <TodoForm Todo="@SelectedTodo" OnSubmit="HandleTodoSubmit" OnCancel="HandleEditCancel" />
}

@code {
    private IList<Todo> Todos { get; set; }
    private Todo SelectedTodo { get; set; }

    private async Task FetchTodos()
    {
        var response = await Mediator.Send(new GetTodosRequest());
        Todos = response.Todos.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchTodos();
        SelectedTodo = new Todo();
    }

    private void HandleTodoSelected(Todo todo)
    {
        Console.WriteLine($"Todo selected: {todo.Id}");
        SelectedTodo = todo;
        StateHasChanged();
    }

    public async Task HandleTodoSubmit(Todo todo)
    {
        Console.WriteLine($"Todo submited: {todo.Id}");

        if (todo.Id == Guid.Empty)
            await Mediator.Send(new CreateTodoRequest(todo.Text, todo.Done));
        else
            await Mediator.Send(new UpdateTodoRequest(todo.Id, todo.Text, todo.Done));

        await FetchTodos();
        SelectedTodo = new Todo();
        StateHasChanged();
    }

    public void HandleEditCancel()
    {
        SelectedTodo = new Todo();
        StateHasChanged();
    }

    private async Task HandleTodoRemove(Todo todo)
    {
        await Mediator.Send(new DeleteTodoRequest(todo));
        await FetchTodos();
        StateHasChanged();
    }
}