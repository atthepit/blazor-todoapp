@page "/"

@using TodoApp.Client.Components;
@using TodoApp.Client.Services;
@using TodoApp.Shared;

@inject ITodosService todosSvc

@if (Todos == null)
{
    <p>Loading...</p>
}
else
{
    <TodoList Todos="@Todos" OnTodoSelected="HandleTodoSelected" OnTodoRemove="HandleTodoRemove" />
    <TodoForm Todo="@SelectedTodo" OnSubmit="HandleTodoSubmit" OnCancel="HandleEditCancel" />
}

@code {
    private IList<Todo> Todos { get; set; }
    private Todo SelectedTodo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await todosSvc.GetAllAsync();
        Todos = response.ToList();

        SelectedTodo = new Todo();
    }

    private void HandleTodoSelected(Todo todo)
    {
        Console.WriteLine($"Todo selected: {todo.Id}");
        SelectedTodo = Todo.Copy(todo);
        StateHasChanged();
    }

    public async Task HandleTodoSubmit(Todo todo)
    {
        Console.WriteLine($"Todo submited: {todo.Id}");

        var existingTodo = Todos.FirstOrDefault(t => t.Id == todo.Id);
        if (existingTodo == null)
        {
            await todosSvc.AddAsync(todo);
            Todos.Add(todo);
        }
        else
        {
            await todosSvc.UpdateAsync(todo);
            Todo.Copy(existingTodo, todo);
        }

        SelectedTodo = new Todo();
        StateHasChanged();
    }

    public void HandleEditCancel()
    {
        SelectedTodo = new Todo();
        StateHasChanged();
    }

    private async Task HandleTodoRemove(Todo todo)
    {
        var t = Todos.FirstOrDefault(t => todo.Id == t.Id);
        if (t != null)
        {
            await todosSvc.DeleteAsync(todo);
            Todos.Remove(t);
            StateHasChanged();
        }
    }
}